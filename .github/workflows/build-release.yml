name: Build and Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        go-version: [ '1.23.x' ]
        os: [ windows, linux, darwin ]
        # 扩展支持的架构，包括路由器常见架构
        arch: [ amd64, arm64, arm, mips, mipsle, mips64, mips64le ]
        # 排除不支持的组合（例如 darwin + arm）
        exclude:
          - os: darwin
            arch: arm
          - os: darwin
            arch: mips
          - os: darwin
            arch: mipsle
          - os: darwin
            arch: mips64
          - os: darwin
            arch: mips64le
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Get version from code
        id: version
        run: |
          VERSION=$(grep -E '^version:' config.yml | awk -F': ' '{print $2}')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          OUTPUT="remotec"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="$OUTPUT.exe"
          fi
          # 为 ARM 架构设置 GOARM（默认为 7，可根据需要调整）
          if [ "${{ matrix.arch }}" = "arm" ]; then
            export GOARM=7
          fi
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o $OUTPUT
          echo "Built $OUTPUT"

      - name: Create archives
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "dist/remotec-${{ steps.version.outputs.version }}-windows-${{ matrix.arch }}.zip" "remotec.exe"
          elif [ "${{ matrix.os }}" = "darwin" ]; then
            tar -czf "dist/remotec-${{ steps.version.outputs.version }}-macos-${{ matrix.arch }}.tar.gz" "remotec"
          else
            tar -czf "dist/remotec-${{ steps.version.outputs.version }}-linux-${{ matrix.arch }}.tar.gz" "remotec"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
          generate_release_notes: true
